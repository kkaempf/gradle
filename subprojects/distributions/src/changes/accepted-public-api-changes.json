{
    "acceptedApiChanges": [
        {
            "type": "org.gradle.api.publish.maven.tasks.AbstractPublishToMaven",
            "member": "Method org.gradle.api.publish.maven.tasks.AbstractPublishToMaven.getMavenRepositoryLocator()",
            "acceptation": "Replaced by factory service: MavenPublishers",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.publish.maven.tasks.PublishToMavenLocal",
            "member": "Class org.gradle.api.publish.maven.tasks.PublishToMavenLocal",
            "acceptation": "Replaced by factory service: MavenPublishers",
            "changes": [
                "org.gradle.api.publish.maven.tasks.AbstractPublishToMaven.getMavenRepositoryLocator()"
            ]
        },
        {
            "type": "org.gradle.api.publish.maven.tasks.PublishToMavenRepository",
            "member": "Class org.gradle.api.publish.maven.tasks.PublishToMavenRepository",
            "acceptation": "Replaced by factory service: MavenPublishers",
            "changes": [
                "org.gradle.api.publish.maven.tasks.AbstractPublishToMaven.getMavenRepositoryLocator()"
            ]
        },
        {
            "type": "org.gradle.api.publish.maven.tasks.PublishToMavenRepository",
            "member": "Method org.gradle.api.publish.maven.tasks.PublishToMavenRepository.getRepositoryTransportFactory()",
            "acceptation": "Replaced by factory service: MavenPublishers",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.plugins.JavaLibraryPlugin",
            "member": "Constructor org.gradle.api.plugins.JavaLibraryPlugin()",
            "acceptation": "Removed old injecting constructor",
            "changes": []
        },
        {
            "type": "org.gradle.api.file.ConfigurableFileCollection",
            "member": "Class org.gradle.api.file.ConfigurableFileCollection",
            "acceptation": "Introduce new abstraction for lazy types",
            "changes": [
                "org.gradle.api.provider.HasConfigurableValue"
            ]
        },
        {
            "type": "org.gradle.api.tasks.compile.GroovyCompile",
            "member": "Method org.gradle.api.tasks.compile.GroovyCompile.getCompiler()",
            "acceptation": "Removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.compile.GroovyCompile",
            "member": "Method org.gradle.api.tasks.compile.GroovyCompile.setCompiler(org.gradle.language.base.internal.compile.Compiler)",
            "acceptation": "Removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.kotlin.dsl.ConventionExtensionsKt",
            "member": "Method org.gradle.kotlin.dsl.ConventionExtensionsKt.findPlugin(org.gradle.api.plugins.Convention)",
            "acceptation": "False positive on Kotlin upgrade to 1.3.41, baseline is effectively null returning",
            "changes": [
                "From non-null returning to null returning breaking change"
            ]
        },
        {
            "type": "org.gradle.kotlin.dsl.ExtensionContainerExtensionsKt",
            "member": "Method org.gradle.kotlin.dsl.ExtensionContainerExtensionsKt.findByType(org.gradle.api.plugins.ExtensionContainer)",
            "acceptation": "False positive on Kotlin upgrade to 1.3.41, baseline is effectively null returning",
            "changes": [
                "From non-null returning to null returning breaking change"
            ]
        }
    ]
}
